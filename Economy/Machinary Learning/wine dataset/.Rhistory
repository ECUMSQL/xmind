scale_fill_manual(values=c("#00AFBB", "#FC4E07", "#E7B800"))+
coord_flip()+
theme(
axis.title=element_text(size=15,face="plain",color="black"),
axis.text = element_text(size=12,face="plain",color="black"),
legend.title=element_text(size=14,face="plain",color="black"),
legend.background  =element_blank(),
legend.position = c(0.83,0.12)
)
View(mydata)
mydata<-mydata[,c(1,3,2)]
View(mydata)
ibrary(reshape)
mydata<-read.csv("Stackedbar_Data.csv",sep=",",na.strings="NA",stringsAsFactors=FALSE)
View(mydata)
mydata<-mydata[,c(1,3,2)]
View(mydata)
mydata<-melt(mydata,id.vars='Country')
View(mydata)
ggplot(data=mydata,aes(Country,value,fill=variable))+
geom_bar(stat="identity", color="black", position=position_dodge(),width=0.7,size=0.25)+
scale_fill_manual(values=c("#00AFBB", "#FC4E07", "#E7B800"))+
coord_flip()+
theme(
axis.title=element_text(size=15,face="plain",color="black"),
axis.text = element_text(size=12,face="plain",color="black"),
legend.title=element_text(size=14,face="plain",color="black"),
legend.background  =element_blank(),
legend.position = c(0.83,0.12)
)
#----------------
mydata<-read.csv("Stackedbar_Data.csv",sep=",",na.strings="NA",stringsAsFactors=FALSE)
View(mydata)
rowsum<-sort(rowSums(mydata[,2:ncol(mydata)]),index.return=TRUE)
mydata$Country <- factor(mydata$Country, levels = mydata$Country[order(rowsum$ix)])
mydata<-melt(mydata,id.vars='Country')
ggplot(data=mydata,aes(Country,value,fill=variable))+
geom_bar(stat="identity",position="stack", color="black", width=0.65,size=0.25)+
scale_fill_manual(values=brewer.pal(9,"YlOrRd")[c(6:2)])+
ylim(0, 35)+
coord_flip()+
theme(
#text=element_text(size=15,face="plain",color="black"),
axis.title=element_text(size=15,face="plain",color="black"),
axis.text = element_text(size=12,face="plain",color="black"),
legend.title=element_text(size=13,face="plain",color="black"),
legend.position = "right"# c(0.83,0.15)
)
library(tm)
library(wordcloud)
Paper1<-paste(scan("Paper1.txt", what = character(0),sep = ""), collapse = " ") #读入TXT 文档1
Paper2<-paste(scan("Paper2.txt", what = character(0),sep = ""), collapse = " ") #读入TXT 文档2
tmpText<- data.frame(c(Paper1, Paper2),row.names=c("Text1","Text2"))
View(tmpText)
tmpText<- data.frame(c(Paper1, Paper2),row.names=c("Text1","Text2"))
df_title <- data.frame(doc_id=row.names(tmpText),
text=tmpText$c.Paper1..Paper2.)
ds <- DataframeSource(df_title)
#创建一个数据框格式的数据源，首列是文档id(doc_id),第二列是文档内容
corp <- VCorpus(ds)
#加载文档集中的文本并生成语料库文件
corp<- tm_map(corp,removePunctuation) #清除语料库内的标点符号
corp <- tm_map(corp,PlainTextDocument) #转换为纯文本
corp <- tm_map(corp,removeNumbers) #清除数字符号
corp <- tm_map(corp, function(x){removeWords(x,stopwords())}) #过滤停止词库
term.matrix <- TermDocumentMatrix(corp)
#利用TermDocumentMatrix()函数将处理后的语料库进行断字处理，生成词频权重矩阵
term.matrix <- as.matrix(term.matrix) #频率
colnames(term.matrix) <- c("Paper1","paper2")
df<-data.frame(term.matrix)
write.csv(df,'term_matrix.csv') #导出两篇文章的频率分析结果
#---------------------------------------导入数据------------------------------------------
df<-read.csv('term_matrix.csv',header=TRUE,row.names=1)
#-------------------------------------单篇文章数据的展示-----------------------------------------------------------------
#Colors<-colorRampPalette(rev(brewer.pal(9,'RdBu')))(length(df$Paper1>10))
wordcloud(row.names(df) , df$Paper1 , min.freq=10,col=brewer.pal(8, "Dark2"), rot.per=0.3 )
#----------------------------------------两篇文章数据的对比-------------------------------------------------------------
comparison.cloud(df, max.words=300, random.order=FALSE, rot.per=.15, c(4,0.4), title.size=1.4)
comparison.cloud(df,max.words=300,random.order=FALSE,colors=c("#00B2FF", "red"))
commonality.cloud(df,max.words=100,random.order=FALSE,color="#E7298A")
# comparison cloud
comparison.cloud(df, random.order=FALSE,
colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
title.size=1.5, max.words=500)
library(ggplot2)
mydata<-read.csv("Scatter_Data.csv",stringsAsFactors=FALSE)
mydata<-read.csv("Scatter_Data.csv",stringsAsFactors=FALSE)
View(mydata)
ggplot(data = mydata, aes(x,y)) +
geom_point(fill="black",colour="black",size=3,shape=21) +
#geom_smooth(method="lm",se=TRUE,formula=y ~ splines::bs(x, 5),colour="red")+ #(h)
#geom_smooth(method = 'gam',formula=y ~s(x))+   #(g)
geom_smooth(method = 'loess',span=0.4,se=TRUE,colour="#00A5FF",fill="#00A5FF",alpha=0.2)+ #(f)
scale_y_continuous(breaks = seq(0, 125, 25))+
theme(
text=element_text(size=15,color="black"),
plot.title=element_text(size=15,family="myfont",hjust=.5,color="black"),
legend.position="none"
)
mydata<-read.csv("HighDensity_Scatter_Data.csv",stringsAsFactors=FALSE)
View(mydata)
mydata<-read.csv("HighDensity_Scatter_Data.csv",stringsAsFactors=FALSE)
ggplot(data = mydata, aes(x,y)) +
geom_point( colour="black",alpha=0.1)+
labs(x = "Axis X",y="Axis Y")+
theme(
text=element_text(size=15,color="black"),
plot.title=element_text(size=15,family="myfont",face="bold.italic",hjust=.5,color="black"),
legend.position="none"
)
kmeansResult<- kmeans(mydata, 2, nstart = 20)
mydata$cluster <- as.factor(kmeansResult$cluster)
ggplot(data = mydata, aes(x,y,color=cluster)) +
geom_point( alpha=0.2)+
scale_color_manual(values=c("#00AFBB",  "#FC4E07"))+
labs(x = "Axis X",y="Axis Y")+
theme(
text=element_text(size=15,color="black"),
plot.title=element_text(size=15,family="myfont",face="bold.italic",color="black"),
legend.background=element_blank(),
legend.position=c(0.85,0.15)
)
library(ggplot2)
library(RColorBrewer)
library(ggrepel)
attach(mtcars)
library(ggplot2)
library(RColorBrewer)
library(ggrepel)
attach(mtcars)
library(ggplot2)
library(RColorBrewer)
library(ggrepel)
attach(mtcars)
attach(mtcars)
ggplot(data=mtcars, aes(x=wt,y=mpg))+
geom_point(aes(size=disp,fill=disp),shape=21,colour="black",alpha=0.8)+
scale_fill_gradient2(low="#377EB8",high="#E41A1C",midpoint = mean(mtcars$disp))+
geom_text_repel(label = disp )+
scale_size_area(max_size=12)+
guides(size = guide_legend((title="Value")),
fill = guide_legend((title="Value")))+
theme(
legend.text=element_text(size=10,face="plain",color="black"),
axis.title=element_text(size=10,face="plain",color="black"),
axis.text = element_text(size=10,face="plain",color="black"),
legend.position = "right"
)
data=mtcars
data=mtcars
library(ggplot2)
mydata<-read.csv("Norm.csv",stringsAsFactors=FALSE,header=TRUE) #以3为均值，1为标准差的正态分布
mydata$Class<-rep("Class",nrow(mydata))
colnames(mydata)<-c("Value","Class")
color<-brewer.pal(7,"Set2")[c(1,2,4,5)]
library(ggplot2)
mydata<-read.csv("Norm.csv",stringsAsFactors=FALSE,header=TRUE) #以3为均值，1为标准差的正态分布
mydata$Class<-rep("Class",nrow(mydata))
colnames(mydata)<-c("Value","Class")
color<-brewer.pal(7,"Set2")[c(1,2,4,5)]
#----------------------------------------------(a)点状图--------------------------------------------------------------------------------
p <- ggplot(mydata, aes(Class, Value))+
geom_dotplot(fill =color[4],binaxis='y', stackdir='center', dotsize = 0.8)+
scale_y_continuous(breaks=seq(0,6,1))+
theme_classic()+
theme(panel.background=element_rect(fill="white",colour="black",size=0.25),
axis.line=element_line(colour="black",size=0.25),
axis.title=element_text(size=13,face="plain",color="black"),
axis.text = element_text(size=12,face="plain",color="black"),
legend.position="none"
)
p
ggplot(mydata, aes(Value,  fill=Value))+
geom_histogram(binwidth=0.2,alpha=1,fill=color[4],colour="black",size=0.25)+#binwidth =0.2,
##### coord_flip()+
theme_classic()+
scale_x_continuous(breaks=seq(0,6,1))+
theme(
panel.background  = element_rect(color="black"),
text=element_text(size=15,color="black"),
plot.title=element_text(size=15,family="myfont",face="bold.italic",hjust=.5,color="black"),
legend.position=c(0.8,0.8),
legend.background = element_blank()
)
View(mydata)
ggplot(mydata, aes(Value,  fill=Value))+
geom_density(alpha=1,colour="black",size=0.25,fill=color[4])+
####coord_flip()+
theme_classic()+
scale_x_continuous(breaks=seq(0,6,1))+
theme(
panel.background  = element_rect(color="black"),
text=element_text(size=15,color="black"),
plot.title=element_text(size=15,family="myfont",face="bold.italic",hjust=.5,color="black"),
legend.position=c(0.8,0.8),
legend.background = element_blank()
)
#-----------------------------------------------(d)带误差线的柱形图----------------------------------------------------
p <- ggplot(mydata, aes(Class, Value))+
stat_summary(fill =color[4],fun.y=mean, geom='bar',colour="black",width=.7,size=0.5) +
stat_summary(fun.data = mean_sdl, geom='errorbar', color='black',width=.2,size=0.5) +
geom_jitter(fill ="white",position = position_jitter(0.2),shape=21, size = 2,alpha=0.9)+
scale_y_continuous(breaks=seq(0,6,1))+
ylab("Value")+
theme_classic()+
theme(panel.background=element_rect(fill="white",colour="black",size=0.25),
axis.line=element_line(colour="black",size=0.25),
axis.title=element_text(size=13,face="plain",color="black"),
axis.text = element_text(size=12,face="plain",color="black"),
legend.position="none"
)
p
p <- ggplot(mydata, aes(Class, Value))+
geom_boxplot(fill =color[4],notch = FALSE) +
theme_classic()+
scale_y_continuous(breaks=seq(0,6,1))+
theme(panel.background=element_rect(fill="white",colour="black",size=0.25),
axis.line=element_line(colour="black",size=0.25),
axis.title=element_text(size=13,face="plain",color="black"),
axis.text = element_text(size=12,face="plain",color="black"),
legend.position="none"
)
p
set.seed(141079)
# Generate sample data -------------------------------------------------------
#findParams函数参考：https://github.com/hadley/boxplots-paper
findParams <- function(mu, sigma, skew, kurt) {
value <- .C("JohnsonMomentFitR", as.double(mu), as.double(sigma),
as.double(skew), as.double(kurt - 3), gamma = double(1),
delta = double(1), xi = double(1), lambda = double(1),
type = integer(1), PACKAGE = "SuppDists")
list(gamma = value$gamma, delta = value$delta,
xi = value$xi, lambda = value$lambda,
type = c("SN", "SL", "SU", "SB")[value$type])
}
findParams <- function(mu, sigma, skew, kurt) {
value <- .C("JohnsonMomentFitR", as.double(mu), as.double(sigma),
as.double(skew), as.double(kurt - 3), gamma = double(1),
delta = double(1), xi = double(1), lambda = double(1),
type = integer(1), PACKAGE = "SuppDists")
list(gamma = value$gamma, delta = value$delta,
xi = value$xi, lambda = value$lambda,
type = c("SN", "SL", "SU", "SB")[value$type])
}
----------(f) 多数据带误差线的柱形图--------------------------------------------------
set.seed(141079)
# Generate sample data -------------------------------------------------------
#findParams函数参考：https://github.com/hadley/boxplots-paper
findParams <- function(mu, sigma, skew, kurt) {
value <- .C("JohnsonMomentFitR", as.double(mu), as.double(sigma),
as.double(skew), as.double(kurt - 3), gamma = double(1),
delta = double(1), xi = double(1), lambda = double(1),
type = integer(1), PACKAGE = "SuppDists")
list(gamma = value$gamma, delta = value$delta,
xi = value$xi, lambda = value$lambda,
type = c("SN", "SL", "SU", "SB")[value$type])
}
# 均值为3，标准差为1的正态分布
n <- rnorm(100,3,1)
# 两个峰的均值μ1，μ2分别为1.89和3.79，σ1 = σ2 =0.31
mm <- rnorm(100, rep(c(2, 4), each = 50) * sqrt(0.9), sqrt(0.1))
mydata <- data.frame(
Class = factor(rep(c("n", "mm"), each = 100),
c("n", "mm")),
Value = c(n,  mm)
)
ggplot(mydata, aes(Class, Value))+
stat_summary(mapping=aes(fill = Class),fun.y=mean, fun.args = list(mult=1),geom='bar',colour="black",width=.7) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult=1),geom='errorbar', color='black',width=.2) +
scale_fill_manual(values=c(brewer.pal(7,"Set2")[c(1,2,4,5)]))+
ylim(0,7.5)+
theme_classic()+
theme(panel.background=element_rect(fill="white",colour="black",size=0.25),
axis.line=element_line(colour="black",size=0.25),
axis.title=element_text(size=13,face="plain",color="black"),
axis.text = element_text(size=12,face="plain",color="black"),
legend.position="none"
)
ggplot(mydata, aes(Class, Value))+
geom_boxplot(aes(fill = Class),notch = FALSE)+
geom_jitter(binaxis = "y", position = position_jitter(0.3),stackdir = "center",dotsize = 0.4)+
scale_fill_manual(values=c(brewer.pal(7,"Set2")[c(1,2,4,5)]))+
theme_classic()+
theme(panel.background=element_rect(fill="white",colour="black",size=0.25),
axis.line=element_line(colour="black",size=0.25),
axis.title=element_text(size=13,face="plain",color="black"),
axis.text = element_text(size=12,face="plain",color="black"),
legend.position="none"
)
mydata<-read.csv("Line_Data.csv",stringsAsFactors=FALSE)
View(mydata)
mydata$date<-as.Date(mydata$date)
mydata<-melt(mydata,id="date")
ggplot(mydata, aes(x =date, y = value,color=variable) )+
#geom_area(fill="#FF6B5E",alpha=0.75)+
geom_line(size=1)+
scale_x_date(date_labels = "%Y",date_breaks = "2 year")+
xlab("Year")+
ylab("Value")+
theme( axis.title=element_text(size=10,face="plain",color="black"),
axis.text = element_text(size=10,face="plain",color="black"),
legend.position = c(0.15,0.8),
legend.background = element_blank())
ggplot(mydata, aes(x =date, y = value,group=variable) )+
geom_area(aes(fill=variable),alpha=0.5,position="identity")+
geom_line(aes(color=variable),size=0.75)+#color="black",
scale_x_date(date_labels = "%Y",date_breaks = "2 year")+
xlab("Year")+
ylab("Value")+
theme( axis.title=element_text(size=10,face="plain",color="black"),
axis.text = element_text(size=10,face="plain",color="black"),
legend.position = c(0.15,0.8),
legend.background = element_blank())
mydata<-read.csv("Area_Data.csv",stringsAsFactors=FALSE)
mydata$date<-as.Date(mydata$date)
ggplot(mydata, aes(x =date, y = value) )+
geom_area(fill="#FF6B5E",alpha=0.75)+
geom_line(color="black",size=0.75)+
scale_x_date(date_labels = "%Y",date_breaks = "2 year")+
xlab("Year")+
ylab("Value")+
theme( axis.title=element_text(size=10,face="plain",color="black"),
axis.text = element_text(size=10,face="plain",color="black"))
#----------------------------(d) 堆积面积图--------------------------------
mydata<-read.csv("StackedArea_Data.csv",stringsAsFactors=FALSE)
mydata$Date<-as.Date(mydata$Date)
mydata<-melt(mydata,id="Date")
ggplot(mydata, aes(x =Date, y = value,fill=variable) )+
geom_area(position="stack",alpha=1)+
geom_line(position="stack",size=0.25,color="black")+
scale_x_date(date_labels = "%Y",date_breaks = "2 year")+
xlab("Year")+
ylab("Value")+
theme( axis.title=element_text(size=10,face="plain",color="black"),
axis.text = element_text(size=10,face="plain",color="black"),
legend.position = "right",
legend.background = element_blank())
################################## Simulate Data ##################################
i.dim = 50 # Data Size
set.seed(1234)
#independent variable
xv = rnorm(i.dim,5,2) # price
# error term in regression model
rv = rnorm(i.dim,0,1) #error term
# Parameters for assignment
b.1 = -0.90  #slope
b.0=10.13   #intercept
#dependent variable
yv=b.0+b.1*xv+rv ######sales
yv1=round(yv)
#data frame
marketingdata <- data.frame(yv1,xv)
################################## Simulate Data ##################################
i.dim = 50 # Data Size
set.seed(1234)
#independent variable
xv = rnorm(i.dim,5,2) # price
# error term in regression model
rv = rnorm(i.dim,0,1) #error term
# Parameters for assignment
b.1 = -0.90  #slope
b.0=10.13   #intercept
#dependent variable
yv=b.0+b.1*xv+rv ######sales
yv1=round(yv)
#data frame
marketingdata <- data.frame(yv1,xv)
View(marketingdata)
## scatter plot
plot(marketingdata$xv,marketingdata$yv1,xlab="price", ylab="sales",xlim=c(0,10),ylim=c(1,11),type="p",cex = 1.5, lwd =1.5,pch=21,col="blue")
title("Demand Analysis –Plot")
abline(c(10.36,-0.92),lwd=2,lty=1, col="red")  #####a, b	the intercept and slope, single values
summary(marketingdata$xv)
model1 = lm(yv1 ~ xv,data=marketingdata)
print(model1)
summary(model1)
model1$residuals
model1$fit
RSS=sum(model1$residuals^2)
TSS=sum((yv1-mean(yv1))^2)
R2=1-RSS/TSS
R2
View(marketingdata)
summary(model1)
R2=1-RSS/TSS
R2
xv <- matrix(as.numeric(xv),ncol=1)
###########################Linear regression###################
###############################################################
####(1) One-Variable Linear Regression
################################## Simulate Data ##################################
i.dim = 50 # Data Size
set.seed(1234)
#independent variable
xv = rnorm(i.dim,5,2) # price
# error term in regression model
rv = rnorm(i.dim,0,1) #error term
# Parameters for assignment
b.1 = -0.90  #slope
b.0=10.13   #intercept
#dependent variable
yv=b.0+b.1*xv+rv ######sales
yv1=round(yv)
#data frame
marketingdata <- data.frame(yv1,xv)
# Example (linear regression)
xv <- matrix(as.numeric(xv),ncol=1)
xv1 <-cbind(rep(1,nrow(xv)),xv)
View(xv)
View(xv1)
XpXinv = chol2inv(chol(crossprod(xv1)))
XpXinv
bhat = XpXinv%*%crossprod(xv1,yv1) # the coefficient of linear regression
res = as.vector(yv1-xv1%*%bhat)
bhat
f=function(xv)(xv)^2*(-0.92)+10.36*xv
curve(f,0,10,xlab="price", ylab="Profit" )
View(xv)
#(2) price elasticity
logxv=log(xv)
logyv=log(yv1)
model2 = lm(logyv ~ logxv)
summary(model2)
wine<- read.csv("wine.csv")
str(wine)
summary(wine)
model1=lm(Price~AGST,data=wine)
summary(model1)
curwd = setwd('C:/Users/Xuebin Cui/Desktop/Week 7/wine dataset/')
wine<- read.csv("wine.csv")
curwd = setwd('C:/Users/Xuebin Cui/Desktop/wine dataset/')
wine<- read.csv("wine.csv")
str(wine)
summary(wine)
model1=lm(Price~AGST,data=wine)
summary(model1)
cor(wine$WinterRain,wine$Price)
cor(wine$Age,wine$FrancePop)
cor(wine)
model5=lm(Price~AGST+HarvestRain+WinterRain,data=wine)
summary(model5)
RSS=sum(model5$residuals^2)
RSS
library(car)
vif(model3)
sqrt(vif(model3))>2 #squart vif >2  has multicollinearity problem
### test linear regression (multicollinearity problem)
install.packages("car")
library(car)
vif(model3)
sqrt(vif(model3))>2 #squart vif >2  has multicollinearity problem
wineTest<- read.csv("wine_test.csv")
str(wineTest)
predictTest=predict(model4,newdata=wineTest)
predictTest
RSS= sum((wineTest$Price-predictTest)^2)
TSS= sum((wineTest$Price-mean(wine$Price))^2)
Test_R2=1-SSE/SST
###############making prediciton
wineTest<- read.csv("wine_test.csv")
str(wineTest)
predictTest=predict(model4,newdata=wineTest)
model1=lm(Price~AGST,data=wine)
summary(model1)
model4=lm(Price~AGST+HarvestRain+WinterRain+Age,data=wine)
summary(model4)
wineTest<- read.csv("wine_test.csv")
str(wineTest)
predictTest=predict(model4,newdata=wineTest)
predictTest
RSS= sum((wineTest$Price-predictTest)^2)
TSS= sum((wineTest$Price-mean(wine$Price))^2)
Test_R2=1-SSE/SST
RSS= sum((wineTest$Price-predictTest)^2)
TSS= sum((wineTest$Price-mean(wine$Price))^2)
Test_R2=1-RSS/TSS
Test_R2
View(wineTest)
View(wineTest)
max(df$y,na.rm = TRUE)
29.1648 #maximum revenue
df$x[which(df$y==(max(df$y,na.rm = TRUE)))]
5.6 #maximum value of price
f=function(xv)(xv)^2*(-0.92)+10.36*xv
curve(f,0,10,xlab="price", ylab="Profit" )
max(df$y,na.rm = TRUE)
###########################Linear regression###################
###############################################################
####(1) One-Variable Linear Regression
################################## Simulate Data ##################################
i.dim = 50 # Data Size
set.seed(1234)
#independent variable
xv = rnorm(i.dim,5,2) # price
# error term in regression model
rv = rnorm(i.dim,0,1) #error term
# Parameters for assignment
b.1 = -0.90  #slope
b.0=10.13   #intercept
#dependent variable
yv=b.0+b.1*xv+rv ######sales
yv1=round(yv)
#data frame
marketingdata <- data.frame(yv1,xv)
#(1) Optimal Pricing
f=function(xv)(xv)^2*(-0.92)+10.36*xv
curve(f,0,10,xlab="price", ylab="Profit" )
max(df$y,na.rm = TRUE)
f=function(xv)(xv)^2*(-0.92)+10.36*xv
df=curve(f,0,10,xlab="price", ylab="Revenue" )
max(df$y,na.rm = TRUE)
df$x[which(df$y==(max(df$y,na.rm = TRUE)))]
